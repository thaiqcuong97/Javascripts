parameters: Là tham số truyền vào trong function : fuonction(pram1, pram2,...);

1.Định nghĩa.
  - Là tập hợp gồm nhiều câu lệnh đượcc sắp xếp theo một thứ tự xác định để xây dựng thành một chức năng, 
  giúp chung ta dùng lại nhiều lần, khi nào cần thì chúng ta gọi lại và dùng.
  - Được gọi từ bên ngoài hoặc bên trong chính nó.
  - Một hàm có thể được gọi nhiều lần (hay nói cách khác là không giới hạn số lần gọi hàm).

2.Hàm không return
  - Là hàm làm công việc nào đó mà không cần trả về  và bên ngoài không cần dùng kết quả của nó cho code khác.
    Ex: 
      function sum(a,b){
        const sum = a+b;
        console.log(sum)
      }
      sum(2,3);
3.Hàm có return
  - Là hàm trả về kết quả giá trị nào đó.
    Ex: 
      function sum(a,b){
        return a+b;
      }
      sum(2,3);

4.Arrow function
  - Giống với Function nhưng được viết rút gọn lại.
  - Cú pháp của ES6.
  4.1.Cách sử dụng.
    4.1.1.Với nhiều tham số
      - Ex:
        const Sum = (a,b) => a*b;
        Sum(2,3);
    4.1.2.Với mọt tham số
      - Ex:
        const phraseSplitter = phrase => phrase.split(' ');
        phraseSplitter('Arrow function');
    4.1.3.Không có tham số
      - Ex:
        const sayName = () => {console.log('Thai Quoc Cuong');};
        sayName();
  4.2. Lưu ý khi dùng arrow function.
    - Arrow function không bị ràng buộc bởi this.
    Ex:
      var x = 0;
      function DelayPrint(x, timeout) {
        this.x = x;
      setTimeout(function print(x, timeout) {
        console.log(`The value is ${this.x}.`);
        }, timeout);
      }
    DelayPrint(1, 1000);
    -Arrow function sử dụng khá ok trong các TH dùng: map, filter, reducer,...
    -Arrow function không có bind.
    -Arrow function không phù hợp là method của object.  
5. Anonymous Function
  - Anonymous functions hay còn gọi là hàm ẩn danh, 
  là một hàm được sinh ra đúng vào thời điểm chạy của chương trình.
  - Anonymous functions được khai báo bằng cách sử dụng toán tử 
  thay vì sử dụng cú pháp định nghĩa hàm thông thường.

6.Arguments function 
  - Là object giống Array khả truy cập bên trong hàm, 
    chứa các giá trị của đối số truyền vào trong hàm đó.
    Ex: 
      function func1(a, b, c) {
        console.log(arguments[0]);
        // expected output: 1
      }
      func1(1,2,3);
  - “Giống Array” tức là arguments có thuộc tính length và đánh chỉ mục từ không (0), 
    nhưng nó không có phương thức dựng sẵn của Array như forEach() và map().

7.Function overloading.
  function sayHi(firt,last,middle){
    console.log('Hi' + ' ' +firt + ' ' + last + ' ' + middle);
    console.log(1)
  }

  function sayHi(firt,last){
    console.log('Hi' + ' ' +firt + ' ' + last);
    console.log(2);
  }

  sayHi('Thai', Quoc);
  sayHi('Thai','Quoc','Cuong')

  => Hi Thai Quoc 2 ; Hi Thai Quoc 2
  
  --> Trong hoisting mới vô nó sẽ chạy file --> Tạo ra 1 vùng bộ nhớ cho hàm ở trước (sayHi(1)) -->
      Nếu ở dưới có thêm 1 hàm giống (SayHi()) thì nó sẽ bỏ hàm trên và lưu hàm dưới(sayHi(2)ghi đè lên sayHi(1))
      --> nên sẽ ra kết quả 2.

Ta không nên viết 2 hàm, để khắc phục tham số không biết trước ta dùng function arguments.

  function sayHi(firt,last){
    let middle = arguments[2] || '';
    console.log('Hi' + ' ' +firt + ' ' + last);
    console.log(2);
    }
  
  sayHi('Thai','Quoc','Cuong');  // Hi Thai Quoc Cuong 

8.ES6 default arguments.

 function sayHi(number1,number2 = 0; number3 =0){
  // let middle = arguments[2] || '';
    return number1 + number2 + number3;
    }
  
  sayHi('100');

- default arguments là parameters truyền vào trog function được gán giá trị trực tiếp.

9.Immediately invoked function expression 
- IIFE là một dạng function expression định nghĩa một anonymous function được thực thi ngay sau khi nó được tạo ra.
  function sayHi(name) {
      console.log(`Hello ${name}`)
  }('Cường') 
  // Hello Cường

- Cách khai báo này sẽ chứa hai phần chính: 
  + Phần thứ nhất là function sayHi(name){} , bạn sẽ khai báo function trong đây.
  + Phần thứ hai là () , có nhiệm vụ thực thi function ngay sau khi nó được khai báo.

-Dùng IIFE trong trường hợp nào.
  + Bạn có thể dùng cách khai báo này trong trường hợp viết thư viện và cần nó thực thi một cách tự động.
  + Ngoài ra để giảm thiểu memory leak do global variables( rò rỉ bộ nhớ) gây ra, bạn cũng nên dùng cách khai báo này. 
  Bởi vì những biến được khai báo trong IIFE sẽ không thể sử dụng bên ngoài scope của nó.

-Chú ý: 
- KHi có 1 hàm để trước hàm tự động chạy nó sẽ sinh ra bug.